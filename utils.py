##Импортирует библиотеку NumPy, которая предоставляет функциональность для работы с многомерными массивами, а также инструменты для работы с линейной алгеброй, преобразованием Фурье и многое другое
import numpy as np

#Этот фрагмент кода представляет функцию load_dataset(), которая используется для загрузки данных набора данных MNIST из файла mnist.npz
def load_dataset():
	#Этот код открывает файл mnist.npz в режиме чтения с использованием функции np.load(). Файл mnist.npz должен быть архивом NumPy, содержащим данные MNIST
	with np.load("mnist.npz") as f:
		#Из архива загружается массив x_train, который представляет собой изображения рукописных цифр. Затем он приводится к типу float32 и нормализуется, разделив на 255, чтобы значения пикселей были в диапазоне от 0 до 1
		x_train = f['x_train'].astype("float32") / 255

		#Изображения преобразуются из формы (60000, 28, 28) в форму (60000, 784), чтобы каждое изображение было представлено в виде одномерного вектора
		#reshape from (60000, 28, 28) into (60000, 784)
		x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1] * x_train.shape[2]))

		#Из архива загружается массив y_train, содержащий метки для каждого изображения
		y_train = f['y_train']

		#Метки y_train кодируются в формат выходного слоя. Функция np.eye(10)[y_train] преобразует метки в формат "one-hot encoding", где каждая метка заменяется вектором длины 10 с единицей в позиции, соответствующей значению метки, и нулями в остальных позициях
		y_train = np.eye(10)[y_train]

		#x_train, содержащий нормализованные и измененные по форме изображения, и y_train
		return x_train, y_train